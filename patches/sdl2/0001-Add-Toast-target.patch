From 5297e5bd3994abc36292d5dc99873078d34e6113 Mon Sep 17 00:00:00 2001
From: Nuno Silva <little.coding.fox@gmail.com>
Date: Sun, 11 Sep 2022 00:05:58 +0100
Subject: [PATCH] Add Toast target

---
 CMakeLists.txt                      |  32 ++-
 include/SDL_config.h                |   1 -
 include/SDL_config.h.cmake          |   6 +
 include/SDL_config_toast.h          |  85 +++++++
 include/SDL_platform.h              |   4 +
 include/SDL_syswm.h                 |   3 +-
 src/video/SDL_sysvideo.h            |   1 +
 src/video/SDL_video.c               |   3 +
 src/video/toast/SDL_toastevents.c   | 176 ++++++++++++++
 src/video/toast/SDL_toastevents.h   |  29 +++
 src/video/toast/SDL_toastmouse.c    | 185 +++++++++++++++
 src/video/toast/SDL_toastmouse.h    |  33 +++
 src/video/toast/SDL_toastopengles.c |   0
 src/video/toast/SDL_toastopengles.h |   0
 src/video/toast/SDL_toastvideo.c    | 354 ++++++++++++++++++++++++++++
 src/video/toast/SDL_toastvideo.h    |  42 ++++
 src/video/toast/SDL_toastwindow.c   | 172 ++++++++++++++
 src/video/toast/SDL_toastwindow.h   |  45 ++++
 18 files changed, 1166 insertions(+), 5 deletions(-)
 create mode 100644 include/SDL_config_toast.h
 create mode 100644 src/video/toast/SDL_toastevents.c
 create mode 100644 src/video/toast/SDL_toastevents.h
 create mode 100644 src/video/toast/SDL_toastmouse.c
 create mode 100644 src/video/toast/SDL_toastmouse.h
 create mode 100644 src/video/toast/SDL_toastopengles.c
 create mode 100644 src/video/toast/SDL_toastopengles.h
 create mode 100644 src/video/toast/SDL_toastvideo.c
 create mode 100644 src/video/toast/SDL_toastvideo.h
 create mode 100644 src/video/toast/SDL_toastwindow.c
 create mode 100644 src/video/toast/SDL_toastwindow.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b9b9eb6..43624be 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -123,6 +123,8 @@ elseif(UNIX AND NOT APPLE)
     set(AIX TRUE)
   elseif(CMAKE_SYSTEM_NAME MATCHES "Minix.*")
     set(MINIX TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "toast")
+    set(TOAST TRUE)
   endif()
 elseif(APPLE)
   if(CMAKE_SYSTEM_NAME MATCHES ".*Darwin.*")
@@ -856,6 +858,7 @@ if(LIBC)
     check_library_exists(iconv iconv_open "" HAVE_LIBICONV)
     check_library_exists(c iconv_open "" HAVE_BUILTIN_ICONV)
     if(HAVE_BUILTIN_ICONV)
+      list(APPEND EXTRA_LIBS iconv)
       set(HAVE_ICONV 1)
     elseif(HAVE_LIBICONV)
       list(APPEND EXTRA_LIBS iconv)
@@ -1291,6 +1294,27 @@ elseif(UNIX AND NOT APPLE AND NOT ANDROID AND NOT RISCOS)
     # src/core/unix/*.c is included in a generic if(UNIX) section, elsewhere.
   endif()
 
+  if(TOAST)
+    set(SDL_VIDEO_OPENGL_ES 1)
+    set(SDL_VIDEO_RENDER_OGL_ES 1)
+    set(SDL_VIDEO_DRIVER_TOAST 1)
+    set(HAVE_VIDEO_OPENGLES TRUE)
+
+    set(SOURCE_FILES ${SOURCE_FILES} "${SDL2_SOURCE_DIR}/src/core/linux/SDL_threadprio.c")
+    set(SOURCE_FILES ${SOURCE_FILES} "${SDL2_SOURCE_DIR}/src/video/toast/SDL_toastvideo.c")
+    set(SOURCE_FILES ${SOURCE_FILES} "${SDL2_SOURCE_DIR}/src/video/toast/SDL_toastevents.c")
+    set(SOURCE_FILES ${SOURCE_FILES} "${SDL2_SOURCE_DIR}/src/video/toast/SDL_toastmouse.c")
+    set(SOURCE_FILES ${SOURCE_FILES} "${SDL2_SOURCE_DIR}/src/video/toast/SDL_toastopengles.c")
+    set(SOURCE_FILES ${SOURCE_FILES} "${SDL2_SOURCE_DIR}/src/video/toast/SDL_toastwindow.c")
+
+    list(APPEND EXTRA_LIBS "ToastGraphics")
+    list(APPEND EXTRA_LIBS "ToastInput")
+    list(APPEND EXTRA_LIBS "GLESv1_CM")
+    list(APPEND EXTRA_LIBS "OSMesa")
+
+    # src/core/unix/*.c is included in a generic if(UNIX) section, elsewhere.
+  endif()
+
   if(SDL_JOYSTICK)
     if(FREEBSD OR NETBSD OR OPENBSD OR BSDI)
       CheckUSBHID()
@@ -1324,9 +1348,11 @@ elseif(UNIX AND NOT APPLE AND NOT ANDROID AND NOT RISCOS)
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_LINUX_VERSION_H")
   endif()
 
-  file(GLOB MISC_SOURCES ${SDL2_SOURCE_DIR}/src/misc/unix/*.c)
-  set(SOURCE_FILES ${SOURCE_FILES} ${MISC_SOURCES})
-  set(HAVE_SDL_MISC TRUE)
+  if(NOT TOAST)
+    file(GLOB MISC_SOURCES ${SDL2_SOURCE_DIR}/src/misc/unix/*.c)
+    set(SOURCE_FILES ${SOURCE_FILES} ${MISC_SOURCES})
+    set(HAVE_SDL_MISC TRUE)
+  endif()
 
   if(SDL_POWER)
     if(LINUX)
diff --git a/include/SDL_config.h b/include/SDL_config.h
index 3937dbc..9867fcf 100644
--- a/include/SDL_config.h
+++ b/include/SDL_config.h
@@ -23,7 +23,6 @@
 #define SDL_config_h_
 
 #include "SDL_platform.h"
-
 /**
  *  \file SDL_config.h
  */
diff --git a/include/SDL_config.h.cmake b/include/SDL_config.h.cmake
index 754b570..8da48f1 100644
--- a/include/SDL_config.h.cmake
+++ b/include/SDL_config.h.cmake
@@ -505,4 +505,10 @@ typedef unsigned int uintptr_t;
 #  endif /* !_STDINT_H_ && !HAVE_STDINT_H */
 #endif /* __WIN32__ */
 
+#ifdef __toast__
+#define SDL_VIDEO_OPENGL_ES 1
+#define SDL_VIDEO_RENDER_OGL_ES 1
+#define SDL_VIDEO_DRIVER_TOAST 1
+#endif /* __toast__ */
+
 #endif /* SDL_config_h_ */
diff --git a/include/SDL_config_toast.h b/include/SDL_config_toast.h
new file mode 100644
index 0000000..73ecf38
--- /dev/null
+++ b/include/SDL_config_toast.h
@@ -0,0 +1,85 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#ifndef SDL_config_toast_h_
+#define SDL_config_toast_h_
+
+#include "SDL_platform.h"
+
+#define HAVE_STDARG_H   1
+#define HAVE_STDDEF_H   1
+
+/* Most everything except Visual Studio 2008 and earlier has stdint.h now */
+#if defined(_MSC_VER) && (_MSC_VER < 1600)
+/* Here are some reasonable defaults */
+typedef unsigned int size_t;
+typedef signed char int8_t;
+typedef unsigned char uint8_t;
+typedef signed short int16_t;
+typedef unsigned short uint16_t;
+typedef signed int int32_t;
+typedef unsigned int uint32_t;
+typedef signed long long int64_t;
+typedef unsigned long long uint64_t;
+typedef unsigned long uintptr_t;
+#else
+#define HAVE_STDINT_H 1
+#endif /* Visual Studio 2008 */
+
+#ifdef __GNUC__
+#define HAVE_GCC_SYNC_LOCK_TEST_AND_SET 1
+#endif
+
+#define SDL_AUDIO_DRIVER_DUMMY  1
+
+#define SDL_JOYSTICK_DISABLED   1
+
+#define SDL_HAPTIC_DISABLED 1
+
+#define SDL_SENSOR_DISABLED 1
+
+#define SDL_LOADSO_DISABLED 0
+#define SDL_LOADSO_DLOPEN   1
+
+#define SDL_THREADS_DISABLED    0
+
+#define SDL_TIMERS_DISABLED 0
+#define SDL_TIMER_UNIX      1
+
+#define SDL_VIDEO_DRIVER_TOAST  1
+
+#undef SDL_VIDEO_OPENGL_ES
+#define SDL_VIDEO_OPENGL_ES 1
+
+#undef SDL_VIDEO_OPENGL_ES2
+#define SDL_VIDEO_OPENGL_ES2 0
+
+#undef SDL_VIDEO_OPENGL_EGL
+#define SDL_VIDEO_OPENGL_EGL 0
+
+#undef SDL_VIDEO_RENDER_OGL_ES
+#define SDL_VIDEO_RENDER_OGL_ES 1
+
+#undef SDL_VIDEO_RENDER_OGL_ES2
+#define SDL_VIDEO_RENDER_OGL_ES2    0
+
+#define SDL_FILESYSTEM_UNIX   1
+
+#endif /* SDL_config_toast_h_ */
diff --git a/include/SDL_platform.h b/include/SDL_platform.h
index 7166557..e8b9a35 100644
--- a/include/SDL_platform.h
+++ b/include/SDL_platform.h
@@ -65,6 +65,10 @@
 #undef __LINUX__ /* do we need to do this? */
 #define __ANDROID__ 1
 #endif
+#if defined(__toast__)
+#undef __TOAST__
+#define __TOAST__    1
+#endif
 
 #if defined(__APPLE__)
 /* lets us know what version of Mac OS X we're compiling on */
diff --git a/include/SDL_syswm.h b/include/SDL_syswm.h
index f0e9675..430ce18 100644
--- a/include/SDL_syswm.h
+++ b/include/SDL_syswm.h
@@ -138,7 +138,8 @@ typedef enum
     SDL_SYSWM_ANDROID,
     SDL_SYSWM_VIVANTE,
     SDL_SYSWM_OS2,
-    SDL_SYSWM_HAIKU
+    SDL_SYSWM_HAIKU,
+    SDL_SYSWM_TOAST
 } SDL_SYSWM_TYPE;
 
 /**
diff --git a/src/video/SDL_sysvideo.h b/src/video/SDL_sysvideo.h
index c8c425b..bfcb430 100644
--- a/src/video/SDL_sysvideo.h
+++ b/src/video/SDL_sysvideo.h
@@ -426,6 +426,7 @@ extern VideoBootStrap HAIKU_bootstrap;
 extern VideoBootStrap PND_bootstrap;
 extern VideoBootStrap UIKIT_bootstrap;
 extern VideoBootStrap Android_bootstrap;
+extern VideoBootStrap Toast_bootstrap;
 extern VideoBootStrap PSP_bootstrap;
 extern VideoBootStrap RPI_bootstrap;
 extern VideoBootStrap KMSDRM_bootstrap;
diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index a0ca322..c52aac0 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -91,6 +91,9 @@ static VideoBootStrap *bootstrap[] = {
 #if SDL_VIDEO_DRIVER_ANDROID
     &Android_bootstrap,
 #endif
+#if SDL_VIDEO_DRIVER_TOAST
+    &Toast_bootstrap,
+#endif
 #if SDL_VIDEO_DRIVER_PSP
     &PSP_bootstrap,
 #endif
diff --git a/src/video/toast/SDL_toastevents.c b/src/video/toast/SDL_toastevents.c
new file mode 100644
index 0000000..7fd0f06
--- /dev/null
+++ b/src/video/toast/SDL_toastevents.c
@@ -0,0 +1,176 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_TOAST
+
+#include <toast/input.h>
+
+#include "SDL_toastevents.h"
+#include "SDL_events.h"
+#include "SDL_toastwindow.h"
+#include "SDL_toastmouse.h"
+#include "../SDL_sysvideo.h"
+#include "../../events/SDL_events_c.h"
+
+static SDL_Scancode Toast_Keycodes[] = {
+    SDL_SCANCODE_A, //TOAST_KEY_A,
+    SDL_SCANCODE_B, //TOAST_KEY_B,
+    SDL_SCANCODE_C, //TOAST_KEY_C,
+    SDL_SCANCODE_D, //TOAST_KEY_D,
+    SDL_SCANCODE_E, //TOAST_KEY_E,
+    SDL_SCANCODE_F, //TOAST_KEY_F,
+    SDL_SCANCODE_G, //TOAST_KEY_G,
+    SDL_SCANCODE_H, //TOAST_KEY_H,
+    SDL_SCANCODE_I, //TOAST_KEY_I,
+    SDL_SCANCODE_J, //TOAST_KEY_J,
+    SDL_SCANCODE_K, //TOAST_KEY_K,
+    SDL_SCANCODE_L, //TOAST_KEY_L,
+    SDL_SCANCODE_M, //TOAST_KEY_M,
+    SDL_SCANCODE_N, //TOAST_KEY_N,
+    SDL_SCANCODE_O, //TOAST_KEY_O,
+    SDL_SCANCODE_P, //TOAST_KEY_P,
+    SDL_SCANCODE_Q, //TOAST_KEY_Q,
+    SDL_SCANCODE_R, //TOAST_KEY_R,
+    SDL_SCANCODE_S, //TOAST_KEY_S,
+    SDL_SCANCODE_T, //TOAST_KEY_T,
+    SDL_SCANCODE_U, //TOAST_KEY_U,
+    SDL_SCANCODE_V, //TOAST_KEY_V,
+    SDL_SCANCODE_Y, //TOAST_KEY_Y,
+    SDL_SCANCODE_Z, //TOAST_KEY_Z,
+    SDL_SCANCODE_1, //TOAST_KEY_1,
+    SDL_SCANCODE_2, //TOAST_KEY_2,
+    SDL_SCANCODE_3, //TOAST_KEY_3,
+    SDL_SCANCODE_4, //TOAST_KEY_4,
+    SDL_SCANCODE_5, //TOAST_KEY_5,
+    SDL_SCANCODE_6, //TOAST_KEY_6,
+    SDL_SCANCODE_7, //TOAST_KEY_7,
+    SDL_SCANCODE_8, //TOAST_KEY_8,
+    SDL_SCANCODE_9, //TOAST_KEY_9,
+    SDL_SCANCODE_0, //TOAST_KEY_0,
+    SDL_SCANCODE_LSHIFT, //TOAST_KEY_LEFT_SHIFT,
+    SDL_SCANCODE_RSHIFT, //TOAST_KEY_RIGHT_SHIFT,
+    SDL_SCANCODE_LCTRL, //TOAST_KEY_LEFT_CONTROL,
+    SDL_SCANCODE_RCTRL, //TOAST_KEY_RIGHT_CONTROL,
+    SDL_SCANCODE_LEFT, //TOAST_KEY_LEFT_ARROW,
+    SDL_SCANCODE_RIGHT, //TOAST_KEY_RIGHT_ARROW,
+    SDL_SCANCODE_UP, //TOAST_KEY_UP_ARROW,
+    SDL_SCANCODE_DOWN, //TOAST_KEY_DOWN_ARROW,
+    SDL_SCANCODE_SPACE, //TOAST_KEY_SPACE,
+    SDL_SCANCODE_BACKSPACE, //TOAST_KEY_BACKSPACE,
+    SDL_SCANCODE_RETURN, //TOAST_KEY_RETURN,
+    SDL_SCANCODE_ESCAPE, //TOAST_KEY_ESCAPE,
+    SDL_SCANCODE_F1, //TOAST_KEY_F1,
+    SDL_SCANCODE_F2, //TOAST_KEY_F2,
+    SDL_SCANCODE_F3, //TOAST_KEY_F3,
+    SDL_SCANCODE_F4, //TOAST_KEY_F4,
+    SDL_SCANCODE_F5, //TOAST_KEY_F5,
+    SDL_SCANCODE_F6, //TOAST_KEY_F6,
+    SDL_SCANCODE_F7, //TOAST_KEY_F7,
+    SDL_SCANCODE_F8, //TOAST_KEY_F8,
+    SDL_SCANCODE_F9, //TOAST_KEY_F9,
+    SDL_SCANCODE_F10, //TOAST_KEY_F10,
+    SDL_SCANCODE_F11, //TOAST_KEY_F11,
+    SDL_SCANCODE_F12, //TOAST_KEY_F12,
+    SDL_SCANCODE_TAB, //TOAST_KEY_TAB,
+    SDL_SCANCODE_CAPSLOCK, //TOAST_KEY_CAPS_LOCK
+};
+
+static SDL_Scancode
+TranslateKeycode(int keycode)
+{
+    SDL_Scancode scancode = SDL_SCANCODE_UNKNOWN;
+
+    if (keycode < SDL_arraysize(Toast_Keycodes)) {
+        scancode = Toast_Keycodes[keycode];
+    }
+
+    return scancode;
+}
+
+static int
+TranslateMouseButton(int button)
+{
+    if((button & TOAST_INPUT_MOUSE_BUTTON_LEFT) != 0)
+    {
+        return SDL_BUTTON_LEFT;
+    }
+    else if((button & TOAST_INPUT_MOUSE_BUTTON_MIDDLE) != 0)
+    {
+        return SDL_BUTTON_MIDDLE;
+    }
+    else if((button & TOAST_INPUT_MOUSE_BUTTON_RIGHT) != 0)
+    {
+        return SDL_BUTTON_RIGHT;
+    }
+
+    return 0;
+}
+
+void
+Toast_PumpEvents_NonBlocking(_THIS)
+{
+    SDL_VideoData *videodata = (SDL_VideoData *)_this->driverdata;
+
+    struct InputEvent event;
+
+    if(ToastInputPollEvent(&event))
+    {
+        switch(event.type)
+        {
+            case TOAST_INPUT_EVENT_KEYDOWN:
+
+                SDL_SendKeyboardKey(SDL_PRESSED, TranslateKeycode(event.keyEvent.key));
+
+                break;
+
+            case TOAST_INPUT_EVENT_KEYUP:
+
+                SDL_SendKeyboardKey(SDL_RELEASED, TranslateKeycode(event.keyEvent.key));
+
+                break;
+
+            case TOAST_INPUT_EVENT_MOUSEMOVE:
+
+                SDL_SendMouseMotion(Toast_Window, 0, false, event.mouseEvent.x, event.mouseEvent.y);
+
+                break;
+
+            case TOAST_INPUT_EVENT_MOUSEDOWN:
+
+                SDL_SendMouseMotion(Toast_Window, 0, false, event.mouseEvent.x, event.mouseEvent.y);
+                SDL_SendMouseButton(Toast_Window, 0, SDL_PRESSED, TranslateMouseButton(event.mouseEvent.buttons));
+
+                break;
+
+            case TOAST_INPUT_EVENT_MOUSEUP:
+
+                SDL_SendMouseMotion(Toast_Window, 0, false, event.mouseEvent.x, event.mouseEvent.y);
+                SDL_SendMouseButton(Toast_Window, 0, SDL_RELEASED, TranslateMouseButton(event.mouseEvent.buttons));
+
+                break;
+        }
+    }
+}
+
+#endif /* SDL_VIDEO_DRIVER_ANDROID */
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/toast/SDL_toastevents.h b/src/video/toast/SDL_toastevents.h
new file mode 100644
index 0000000..2219aff
--- /dev/null
+++ b/src/video/toast/SDL_toastevents.h
@@ -0,0 +1,29 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#include "SDL_toastvideo.h"
+
+extern SDL_Window *Toast_Window;
+
+extern void Toast_PumpEvents_NonBlocking(_THIS);
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/toast/SDL_toastmouse.c b/src/video/toast/SDL_toastmouse.c
new file mode 100644
index 0000000..6815075
--- /dev/null
+++ b/src/video/toast/SDL_toastmouse.c
@@ -0,0 +1,185 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_TOAST
+
+#include "SDL_toastmouse.h"
+
+#include "SDL_events.h"
+#include "../../events/SDL_mouse_c.h"
+
+typedef struct
+{
+    int custom_cursor;
+    int system_cursor;
+
+} SDL_ToastCursorData;
+
+/* Blank cursor */
+static SDL_Cursor *empty_cursor = NULL;
+
+static SDL_Cursor *
+Toast_WrapCursor(int custom_cursor, int system_cursor)
+{
+    /*
+    SDL_Cursor *cursor;
+
+    cursor = SDL_calloc(1, sizeof(*cursor));
+    if (cursor) {
+        ToastCursorData *data = (SDL_ToastCursorData *)SDL_calloc(1, sizeof(*data));
+        if (data) {
+            data->custom_cursor = custom_cursor;
+            data->system_cursor = system_cursor;
+            cursor->driverdata = data;
+        } else {
+            SDL_free(cursor);
+            cursor = NULL;
+            SDL_OutOfMemory();
+        }
+    } else {
+        SDL_OutOfMemory();
+    }
+
+    return cursor;
+    */
+   return NULL;
+}
+
+static SDL_Cursor *
+Toast_CreateDefaultCursor()
+{
+    return Toast_WrapCursor(0, SDL_SYSTEM_CURSOR_ARROW);
+}
+
+static SDL_Cursor *
+Toast_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
+{
+    return NULL;
+
+    /*
+    int custom_cursor;
+    SDL_Surface *converted;
+
+    converted = SDL_ConvertSurfaceFormat(surface, SDL_PIXELFORMAT_ARGB8888, 0);
+    if (!converted) {
+        return NULL;
+    }
+    custom_cursor = 0; //TODO
+    SDL_FreeSurface(converted);
+    if (!custom_cursor) {
+        SDL_Unsupported();
+        return NULL;
+    }
+    return Toast_WrapCursor(custom_cursor, 0);
+    */
+}
+
+static SDL_Cursor *
+Toast_CreateSystemCursor(SDL_SystemCursor id)
+{
+    return Toast_WrapCursor(0, id);
+}
+
+static void
+Toast_FreeCursor(SDL_Cursor * cursor)
+{
+    SDL_free(cursor->driverdata);
+    SDL_free(cursor);
+}
+
+static SDL_Cursor *
+Toast_CreateEmptyCursor()
+{
+    return NULL;
+
+    /*
+    if (!empty_cursor) {
+        SDL_Surface *empty_surface = SDL_CreateRGBSurfaceWithFormat(0, 1, 1, 32, SDL_PIXELFORMAT_ARGB8888);
+        if (empty_surface) {
+            SDL_memset(empty_surface->pixels, 0, empty_surface->h * empty_surface->pitch);
+            empty_cursor = Toast_CreateCursor(empty_surface, 0, 0);
+            SDL_FreeSurface(empty_surface);
+        }
+    }
+    return empty_cursor;
+    */
+}
+
+static void
+Toast_DestroyEmptyCursor()
+{
+    if (empty_cursor) {
+        Toast_FreeCursor(empty_cursor);
+        empty_cursor = NULL;
+    }
+}
+
+static int
+Toast_ShowCursor(SDL_Cursor *cursor)
+{
+    if (!cursor) {
+        cursor = Toast_CreateEmptyCursor();
+    }
+    if (cursor) {
+
+        //TODO
+
+        return 0;
+    } else {
+        /* SDL error set inside Toast_CreateEmptyCursor() */
+        return -1;
+    }
+}
+
+static int
+Toast_SetRelativeMouseMode(SDL_bool enabled)
+{
+    return SDL_Unsupported();
+}
+
+void
+Toast_InitMouse(void)
+{
+    SDL_Mouse *mouse = SDL_GetMouse();
+
+    empty_cursor = NULL;
+
+    mouse->CreateCursor = Toast_CreateCursor;
+    mouse->CreateSystemCursor = Toast_CreateSystemCursor;
+    mouse->ShowCursor = Toast_ShowCursor;
+    mouse->FreeCursor = Toast_FreeCursor;
+    mouse->SetRelativeMouseMode = Toast_SetRelativeMouseMode;
+
+    SDL_SetDefaultCursor(Toast_CreateDefaultCursor());
+}
+
+void
+Toast_QuitMouse(void)
+{
+    Toast_DestroyEmptyCursor();
+}
+
+#endif /* SDL_VIDEO_DRIVER_TOAST */
+
+/* vi: set ts=4 sw=4 expandtab: */
+
diff --git a/src/video/toast/SDL_toastmouse.h b/src/video/toast/SDL_toastmouse.h
new file mode 100644
index 0000000..7902841
--- /dev/null
+++ b/src/video/toast/SDL_toastmouse.h
@@ -0,0 +1,33 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#ifndef SDL_toastmouse_h_
+#define SDL_toastmouse_h_
+
+#include "SDL_toastvideo.h"
+
+extern void Toast_InitMouse(void);
+extern void Toast_OnMouse(SDL_Window *window, int button, int action, float x, float y, SDL_bool relative);
+extern void Toast_QuitMouse(void);
+
+#endif /* SDL_androidmouse_h_ */
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/toast/SDL_toastopengles.c b/src/video/toast/SDL_toastopengles.c
new file mode 100644
index 0000000..e69de29
diff --git a/src/video/toast/SDL_toastopengles.h b/src/video/toast/SDL_toastopengles.h
new file mode 100644
index 0000000..e69de29
diff --git a/src/video/toast/SDL_toastvideo.c b/src/video/toast/SDL_toastvideo.c
new file mode 100644
index 0000000..0ed6a97
--- /dev/null
+++ b/src/video/toast/SDL_toastvideo.c
@@ -0,0 +1,354 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_TOAST
+
+/* toast SDL video driver implementation */
+#include <toast/graphics.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "SDL_loadso.h"
+#include "SDL_video.h"
+#include "SDL_mouse.h"
+#include "SDL_hints.h"
+#include "../SDL_sysvideo.h"
+#include "../SDL_pixels_c.h"
+#include "../../events/SDL_events_c.h"
+#include "../../events/SDL_windowevents_c.h"
+
+#include "SDL_toastvideo.h"
+#include "SDL_toastevents.h"
+#include "SDL_toastmouse.h"
+#include "SDL_toastwindow.h"
+
+#include <dlfcn.h>
+#include <GLES/gl.h>
+#include <GL/osmesa.h>
+
+#define TOAST_VID_DRIVER_NAME "Toast"
+
+/* Initialization/Query functions */
+static int Toast_VideoInit(_THIS);
+static void Toast_VideoQuit(_THIS);
+int Toast_GetDisplayDPI(_THIS, SDL_VideoDisplay *display, float *ddpi, float *hdpi, float *vdpi);
+
+/* Toast driver bootstrap functions */
+
+void Toast_GL_DeleteContext(_THIS, SDL_GLContext context);
+int Toast_GL_SwapWindow(_THIS, SDL_Window * window);
+int Toast_GL_GetSwapInterval(_THIS);
+int Toast_GL_SetSwapInterval(_THIS, int interval);
+int Toast_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context);
+SDL_GLContext Toast_GL_CreateContext(_THIS, SDL_Window * window);
+void Toast_GL_UnloadLibrary(_THIS);
+void *Toast_GL_GetProcAddress(_THIS, const char *proc);
+int Toast_GL_LoadLibrary(_THIS, const char *path);
+
+/* These are filled in with real values in Toast_SetScreenResolution on init (before SDL_main()) */
+int Toast_ScreenWidth            = 0;
+int Toast_ScreenHeight           = 0;
+static Uint32 Toast_ScreenFormat = SDL_PIXELFORMAT_BGRA8888;
+static int Toast_ScreenRate      = 0;
+
+static void
+Toast_DeleteDevice(SDL_VideoDevice *device)
+{
+    SDL_free(device->driverdata);
+    SDL_free(device);
+}
+
+static SDL_VideoDevice *
+Toast_CreateDevice(int devindex)
+{
+    SDL_VideoDevice *device;
+    SDL_VideoData *data;
+    int bpp = 0;
+
+    /* Initialize all variables that we clean on shutdown */
+    device = (SDL_VideoDevice *) SDL_calloc(1, sizeof(SDL_VideoDevice));
+    if (!device) {
+       SDL_OutOfMemory();
+        return NULL;
+    }
+
+    data = (SDL_VideoData *) SDL_calloc(1, sizeof(SDL_VideoData));
+    if (!data) {
+        SDL_OutOfMemory();
+        SDL_free(device);
+        return NULL;
+    }
+
+    device->driverdata = data;
+
+    /* Set the function pointers */
+    device->VideoInit = Toast_VideoInit;
+    device->VideoQuit = Toast_VideoQuit;
+    device->PumpEvents = Toast_PumpEvents_NonBlocking;
+
+    device->GetDisplayDPI = Toast_GetDisplayDPI;
+
+    device->CreateSDLWindow = Toast_CreateWindow;
+    device->SetWindowTitle = Toast_SetWindowTitle;
+    device->SetWindowFullscreen = Toast_SetWindowFullscreen;
+    device->MinimizeWindow = Toast_MinimizeWindow;
+    device->DestroyWindow = Toast_DestroyWindow;
+    device->GetWindowWMInfo = Toast_GetWindowWMInfo;
+
+    device->free = Toast_DeleteDevice;
+
+    /* GL pointers */
+    device->GL_LoadLibrary = Toast_GL_LoadLibrary;
+    device->GL_GetProcAddress = Toast_GL_GetProcAddress;
+    device->GL_UnloadLibrary = Toast_GL_UnloadLibrary;
+    device->GL_CreateContext = Toast_GL_CreateContext;
+    device->GL_MakeCurrent = Toast_GL_MakeCurrent;
+    device->GL_SetSwapInterval = Toast_GL_SetSwapInterval;
+    device->GL_GetSwapInterval = Toast_GL_GetSwapInterval;
+    device->GL_SwapWindow = Toast_GL_SwapWindow;
+    device->GL_DeleteContext = Toast_GL_DeleteContext;
+
+    /* Screensaver */
+    device->SuspendScreenSaver = NULL;
+
+    /* Text input */
+    device->StartTextInput = NULL;
+    device->StopTextInput = NULL;
+    device->SetTextInputRect = NULL;
+
+    /* Screen keyboard */
+    device->HasScreenKeyboardSupport = SDL_FALSE;
+    device->IsScreenKeyboardShown = SDL_FALSE;
+
+    /* Clipboard */
+    device->SetClipboardText = NULL;
+    device->GetClipboardText = NULL;
+    device->HasClipboardText = NULL;
+
+    ToastGetGraphicsSize(&Toast_ScreenWidth, &Toast_ScreenHeight, &bpp);
+
+    return device;
+}
+
+VideoBootStrap Toast_bootstrap = {
+    TOAST_VID_DRIVER_NAME, "SDL Toast video driver",
+    Toast_CreateDevice
+};
+
+int
+Toast_VideoInit(_THIS)
+{
+    int display_index;
+    SDL_VideoDisplay *display;
+    SDL_DisplayMode mode;
+    int bpp;
+
+    ToastGetGraphicsSize(&Toast_ScreenWidth, &Toast_ScreenHeight, &bpp);
+
+    mode.format          = Toast_ScreenFormat;
+    mode.w               = Toast_ScreenWidth;
+    mode.h               = Toast_ScreenHeight;
+    mode.refresh_rate    = Toast_ScreenRate;
+    mode.driverdata      = NULL;
+
+    display_index = SDL_AddBasicVideoDisplay(&mode);
+    if (display_index < 0) {
+        return -1;
+    }
+    display = SDL_GetDisplay(display_index);
+    display->orientation = 0;    
+
+    SDL_AddDisplayMode(&_this->displays[0], &mode);
+
+    ToastSetGraphicsType(TOAST_GRAPHICS_TYPE_GUI);
+
+    Toast_InitMouse();
+
+    /* We're done! */
+    return 0;
+}
+
+void
+Toast_VideoQuit(_THIS)
+{
+    ToastSetGraphicsType(TOAST_GRAPHICS_TYPE_CONSOLE);
+    Toast_QuitMouse();
+}
+
+int
+Toast_GetDisplayDPI(_THIS, SDL_VideoDisplay *display, float *ddpi, float *hdpi, float *vdpi)
+{
+    return SDL_SetError(SDL_UNSUPPORTED);
+}
+
+int
+Toast_GL_LoadLibrary(_THIS, const char *path)
+{
+    if (path == NULL)
+    {
+        path = SDL_getenv("SDL_OPENGL_LIBRARY");
+
+        if (path == NULL)
+        {
+            path = SDL_getenv("SDL_OPENGLES_LIBRARY");
+        }
+    }
+
+    if (path == NULL)
+    {
+        path = "/usr/lib/libGLESv1_CM.so";
+    }
+
+    _this->gl_config.dll_handle = SDL_LoadObject(path);
+    
+    if (!_this->gl_config.dll_handle)
+    {
+        return SDL_SetError("Toast: Failed to locate OpenGL ES library");
+    }
+
+    SDL_strlcpy(_this->gl_config.driver_path, path, SDL_arraysize(_this->gl_config.driver_path));
+
+    return 0;
+}
+
+void *
+Toast_GL_GetProcAddress(_THIS, const char *proc)
+{
+    void *function_address;
+
+    if (_this->gl_config.dll_handle)
+    {
+        function_address = SDL_LoadFunction(_this->gl_config.dll_handle, proc);
+        
+        if (function_address != NULL)
+        {
+            return function_address;
+        }
+    }
+
+    SDL_SetError("Toast: Cannot locate OpenGL ES function name");
+
+    return NULL;
+}
+
+void
+Toast_GL_UnloadLibrary(_THIS)
+{
+    if (_this->gl_config.dll_handle)
+    {
+        SDL_UnloadObject(_this->gl_config.dll_handle);
+        _this->gl_config.dll_handle = NULL;
+    }
+}
+
+SDL_GLContext
+Toast_GL_CreateContext(_THIS, SDL_Window * window)
+{
+    SDL_VideoData *videoData = (SDL_VideoData *) _this->driverdata;
+    SDL_WindowData *windowData = (SDL_WindowData *) window->driverdata;
+
+    windowData->GLContext = OSMesaCreateContext(OSMESA_BGRA, NULL);
+
+    if(OSMesaMakeCurrent(windowData->GLContext, windowData->buffer, GL_UNSIGNED_BYTE, window->w, window->h) == GL_FALSE)
+    {
+        SDL_SetError("Toast: Failed to create the GL context: failed to make it current");
+
+        return NULL;
+    }
+
+    OSMesaPixelStore(OSMESA_Y_UP, 0);
+
+    _this->gl_config.accelerated = 1;
+    _this->gl_config.stereo = 0;
+    _this->gl_config.double_buffer = 0;
+
+    return windowData->GLContext;
+}
+
+int
+Toast_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
+{
+    SDL_VideoData *videoData = (SDL_VideoData *) _this->driverdata;
+    SDL_WindowData *windowData = NULL;
+    int status = 0;
+
+    if (window == NULL && context == NULL)
+    {
+        OSMesaMakeCurrent(NULL, NULL, 0, 0, 0);
+
+        return 0;
+    }
+    else
+    {
+        windowData = (SDL_WindowData *) window->driverdata;
+
+        status = OSMesaMakeCurrent(windowData->GLContext, windowData->buffer, GL_UNSIGNED_BYTE, window->w, window->h);
+
+        if(status == GL_FALSE)
+        {
+            return SDL_SetError("Toast: Failed to MakeCurrent");
+        }
+    }
+
+    return 0;
+}
+
+int
+Toast_GL_SetSwapInterval(_THIS, int interval)
+{
+    return SDL_SetError(SDL_UNSUPPORTED);
+}
+
+int
+Toast_GL_GetSwapInterval(_THIS)
+{
+    return 0;
+}
+
+int
+Toast_GL_SwapWindow(_THIS, SDL_Window * window)
+{
+    SDL_VideoData *videoData = (SDL_VideoData *) _this->driverdata;
+    SDL_WindowData *windowData = (SDL_WindowData *) window->driverdata;
+
+    glFinish();
+
+    ToastSetGraphicsBuffer(windowData->buffer);
+
+    return 0;
+}
+
+void
+Toast_GL_DeleteContext(_THIS, SDL_GLContext context)
+{
+    OSMesaContext c = (OSMesaContext)context;
+
+    if(c != NULL)
+    {
+        OSMesaDestroyContext(c);
+    }
+}
+
+#endif /* SDL_VIDEO_DRIVER_TOAST */
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/toast/SDL_toastvideo.h b/src/video/toast/SDL_toastvideo.h
new file mode 100644
index 0000000..2e3fc2a
--- /dev/null
+++ b/src/video/toast/SDL_toastvideo.h
@@ -0,0 +1,42 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#ifndef SDL_toastvideo_h_
+#define SDL_toastvideo_h_
+
+#include "SDL_mutex.h"
+#include "SDL_rect.h"
+#include "../SDL_sysvideo.h"
+
+/* Private display data */
+
+typedef struct SDL_VideoData
+{
+   uint8_t *buffer;
+} SDL_VideoData;
+
+extern int Toast_ScreenWidth;
+extern int Toast_ScreenHeight;
+
+#endif /* SDL_toastvideo_h_ */
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/toast/SDL_toastwindow.c b/src/video/toast/SDL_toastwindow.c
new file mode 100644
index 0000000..c167675
--- /dev/null
+++ b/src/video/toast/SDL_toastwindow.c
@@ -0,0 +1,172 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_TOAST
+
+#include "SDL_syswm.h"
+#include "../SDL_sysvideo.h"
+#include "../../events/SDL_keyboard_c.h"
+#include "../../events/SDL_mouse_c.h"
+#include "../../events/SDL_windowevents_c.h"
+
+#include "SDL_toastvideo.h"
+#include "SDL_toastwindow.h"
+#include "SDL_hints.h"
+
+#include <GL/osmesa.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+/* Currently only one window */
+SDL_Window *Toast_Window = NULL;
+
+int
+Toast_CreateWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *data;
+    int retval = 0;
+    int bpp;
+
+    if (Toast_Window)
+    {
+        retval = SDL_SetError("Toast only supports one window");
+        goto endfunction;
+    }
+
+    ToastGetGraphicsSize(&Toast_ScreenWidth, &Toast_ScreenHeight, &bpp);
+
+    /* Adjust the window data to match the screen */
+    window->x = 0;
+    window->y = 0;
+    window->w = Toast_ScreenWidth;
+    window->h = Toast_ScreenHeight;
+
+    window->flags &= ~SDL_WINDOW_HIDDEN;
+    window->flags |= SDL_WINDOW_SHOWN;          /* only one window on Toast */
+
+    /* One window, it always has focus */
+    SDL_SetMouseFocus(window);
+    SDL_SetKeyboardFocus(window);
+
+    data = (SDL_WindowData *) SDL_calloc(1, sizeof(*data));
+    if (!data)
+    {
+        retval = SDL_OutOfMemory();
+        goto endfunction;
+    }
+
+    data->buffer = (uint8_t *)SDL_calloc(1, Toast_ScreenWidth * Toast_ScreenHeight * sizeof(int));
+
+    if (!data->buffer)
+    {
+        retval = SDL_OutOfMemory();
+        goto endfunction;
+    }
+
+    /*
+    if ((window->flags & SDL_WINDOW_OPENGL) != 0) {
+        data->egl_surface = SDL_EGL_CreateSurface(_this, (NativeWindowType) data->native_window);
+
+        if (data->egl_surface == EGL_NO_SURFACE) {
+            ANativeWindow_release(data->native_window);
+            SDL_free(data);
+            retval = -1;
+            goto endfunction;
+        }
+    }
+    */
+
+    window->driverdata = data;
+    Toast_Window = window;
+
+endfunction:
+
+    return retval;
+}
+
+void
+Toast_SetWindowTitle(_THIS, SDL_Window *window)
+{
+}
+
+void
+Toast_SetWindowFullscreen(_THIS, SDL_Window *window, SDL_VideoDisplay *display, SDL_bool fullscreen)
+{
+}
+
+void
+Toast_MinimizeWindow(_THIS, SDL_Window *window)
+{
+}
+
+void
+Toast_DestroyWindow(_THIS, SDL_Window *window)
+{
+    if (window == Toast_Window)
+    {
+        Toast_Window = NULL;
+
+        if (window->driverdata)
+        {
+            SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
+
+            if(data->GLContext != NULL)
+            {
+                OSMesaDestroyContext((OSMesaContext)data->GLContext);
+            }
+
+            if(data->buffer != NULL)
+            {
+                SDL_free(data->buffer);
+            }
+
+            SDL_free(window->driverdata);
+
+            window->driverdata = NULL;
+        }
+    }
+}
+
+SDL_bool
+Toast_GetWindowWMInfo(_THIS, SDL_Window *window, SDL_SysWMinfo *info)
+{
+    SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
+
+    if (info->version.major == SDL_MAJOR_VERSION &&
+        info->version.minor == SDL_MINOR_VERSION)
+    {
+        info->subsystem = SDL_SYSWM_TOAST;
+
+        return SDL_TRUE;
+    }
+    else
+    {
+        SDL_SetError("Application not compiled with SDL %d.%d",
+                     SDL_MAJOR_VERSION, SDL_MINOR_VERSION);
+
+        return SDL_FALSE;
+    }
+}
+
+#endif /* SDL_VIDEO_DRIVER_TOAST */
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/toast/SDL_toastwindow.h b/src/video/toast/SDL_toastwindow.h
new file mode 100644
index 0000000..592f330
--- /dev/null
+++ b/src/video/toast/SDL_toastwindow.h
@@ -0,0 +1,45 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#ifndef SDL_toastwindow_h_
+#define SDL_toastwindow_h_
+
+#include "../SDL_egl_c.h"
+
+extern int Toast_CreateWindow(_THIS, SDL_Window *window);
+extern void Toast_SetWindowTitle(_THIS, SDL_Window *window);
+extern void Toast_SetWindowFullscreen(_THIS, SDL_Window *window, SDL_VideoDisplay *display, SDL_bool fullscreen);
+extern void Toast_MinimizeWindow(_THIS, SDL_Window *window);
+
+extern void Toast_DestroyWindow(_THIS, SDL_Window *window);
+extern SDL_bool Toast_GetWindowWMInfo(_THIS, SDL_Window *window, struct SDL_SysWMinfo *info);
+extern SDL_Window *Toast_Window;
+
+typedef struct
+{
+   void *GLContext;
+   void *buffer;
+} SDL_WindowData;
+
+#endif /* SDL_toastwindow_h_ */
+
+/* vi: set ts=4 sw=4 expandtab: */
-- 
2.25.1

